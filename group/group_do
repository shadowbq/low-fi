#!/usr/bin/env ruby
GROUP_DO_VERSION = '1.0.1'
require 'optparse'
require 'inifile'

# Initialize
@sensors = []
@non_sensors = []

options = {
	:destination	=> "~/",
    :skip	=> false
}


# Load INI File
begin
    myini = IniFile.load("#{Dir.home}/.group.ini")
    myini.each do  |s,p,v|
      if s == 'sensors'
        @sensors << p
      else
        @non_sensors << p
      end

    end
rescue NoMethodError
    abort ("#{Dir.home}/.group.ini file not found.")
end

# Build server list

@servers = @sensors + @non_sensors
@servers = @servers.sort.uniq

# Ask for CLI Options

optparse = OptionParser.new do |opts|
  opts.banner = "GROUP_DO (Version #{GROUP_DO_VERSION} )"
  opts.separator " Usage: #$0 [options] \"[shell commands]\""
  opts.separator " Note: [shell commands] must be escaped."
  opts.separator ""
  opts.separator "  Server List:"

  opts.on( '-a', '--all', 'All Servers (default if none selected)' ) do
    options[:servers] = @servers
  end

  opts.on( '-s', '--sensors', 'Sensors' ) do
    options[:servers] = @sensors
  end

   opts.separator ""
   opts.separator "  Login Options (Select One):"

   opts.on( '-i', '--interactive', 'Connect via subshell with current user' ) do
     options[:interactive] = true
   end

   opts.on( '-x', '--root', 'Connect via root rather than current user' ) do
     options[:root] = true
   end

   opts.on( '-z', '--sudo', 'Connect via current user and sudo' ) do
     options[:sudo] = true
   end

   opts.separator ""
   opts.separator "  Common Options:"

   opts.on( '--skip-config-file', 'skip .ssh configuration file' ) do
     options[:skip]
   end

   opts.on( '-v', '--verbose', 'Verbose Debugging Enabled' ) do
     options[:verbose] = true
   end

   opts.on_tail( '-h', '--help', 'Display this screen' ) do
     puts opts
     exit
  end
end

# Verify the options
begin
  raise unless ARGV.size > 0
  optparse.parse!
  exclusive_options = [:interactive, :root, :sudo]
  if (exclusive_options.collect { |item| item if options.include? item }.compact).length > 1
     puts "Error: Mutually Exclusive options were selected"
     puts optparse
     exit
   end
# If options fail display help
rescue
  puts optparse
  exit
end

# Build up defaults

if options[:servers] == nil
  options[:servers] = @servers
end

# Build up command string

if options[:skip]
  skip = "-F /dev/null "
end

## Run __MAIN__

options[:servers].each_with_index do |ip, index|
 puts "Server #{ip} (#{index+1}/#{options[:servers].length}):" if options[:verbose]
 if options[:root]
   puts "command: ssh #{skip}-q root\@#{ip} -t #{ARGV[0]}" if options[:verbose]
   puts `ssh #{skip}-q root\@#{ip} -t #{ARGV[0]}`
 elsif options[:sudo]
   puts "command: ssh #{skip}-q #{ip} -t sudo sh -c '#{ARGV[0]}'" if options[:verbose]
   puts `ssh #{skip}-q #{ip} -t sudo sh -c '#{ARGV[0]}'`
 elsif options[:interactive]
   puts "command: ssh #{skip}#{ip}" if options[:verbose]
   system ("ssh #{skip}#{ip}")
 else
   puts "command: ssh #{skip}-q #{ip} -t #{ARGV[0]}" if options[:verbose]
   puts `ssh #{skip}-q #{ip} -t #{ARGV[0]}`
 end

end
